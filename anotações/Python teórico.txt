Python é?
	- uma linguagem de propósito geral, pode ser usada para básicamente tudo
	- fácil e intuitivo
	- multipatlaforma
	- livre, código aberto
	- organizada
	- muitas bibliotecas

Zen do python
	- bonito é melhor que feio
	- simples é melhor que complexo
	- complexo é melhor que complicado
	- legibilidade conta
	- erros nunca devem passar silenciosamente
	- agora é melhor que nunca
	- ...

Onde se aplica python?
	- inteligência artificial
	- biotecnologia
	- computação 3d

---------------------------------------------------

VARIÁVEIS
no python toda variável é um objeto

var = dado - var recebe o dado
	ex: nome = 'joão'
	    idade = 34
	    nome = input ('')

---------------------------------------------------

TIPOS PRIMITIVOS
dados em pyton
	strings(str) = 'Olá'
		sequência de caracteres: 123, abc...
	números = 0
		inteiro(int): 1... 6... 45...
		real(float): 1.4... 23.6...
	boleans(bool) = 
		True: verdadeiro
		False: falso
	

---------------------------------------------------

OPERADORES
em python

	= receber
		A = B	. A recebe B	

====

aritiméticos - sem biblioteca
	
	+ adição	. A + B		5 + 2 == 7
	- subtração	. A - B		5 - 2 == 3
	* multiplicação	. A * B		5 * 2 == 10
	/ divisão	. A / B		5 / 2 == 2.5
	// divisão int	. A // B	5 // 2 == 2
	% rest divisão	. A % B		5 % 2 == 1
	** potência	. A ** B	5 ** 2 == 25
	== igualdade	. A == B	5 == 5	

	ordem de precedência
		1º ()
		2º **
		3º * / // %
		4º + -

com biblioteca
	ceil - arredondar resultado pra cima
		9.5 -> 10
	floor - arredondar resultado pra baixo
		9.5 -> 8
	trunc - truncar o número com virgula
		10.5 -> 10
	pow - potência
		10^4
	sqrt - Raiz quadrada
		81 = 9
	factorial - calculo fatorial
		4! = 4 * 3 * 2 * 1
	...

====

operadores relacionais

	> Maior que
	< Menor que
	== Igual a
	!= Diferente
	>= Maior ou igual
	<= Menor ou igual

====

operadores lógicos:

	p q - p E q
	V V - V
	V F - F
	F V - F
	F F - F

	p q - p OU q
	V V - V
	V F - V
	F V - V
	F F - F

	  \/

	  E - AND
	  OU - OR

---------------------------------------------------


CONCATENAÇÃO

	,
	.
	+

---------------------------------------------------

MÓDULOS
adições/importações de bibliotecas

checar bibliotecas = python.org > docs > escolher versão > Library Refence
	python.org > PyPi > escolher biblioteca > instalar

---------------------------------------------------

LISTAS - arrays
armazenar mais de uma informação em um só lugars

var = [elemento1, elemento2, elemento3]

---------------------------------------------------

CONDIÇÕES
simples e compostas

Exemplo do cotidiano:
	Atravessar a Rua
		Olhar para a direita
		Olhar para a esquerda
		Se estiver vindo carro
			Não atravesse
		Senão
			Atravesse
	Fim-Algoritmo

Se - Senão
If - Else

base - composta

comando
if.comando:
	bloco 1 
else:
	bloco 2
fim

base - simplificada
'dado' if var <= 3 else 'dado2'

====

condições ANINHADAS

	carro.siga
	se carro,esquerda
		carro.siga
		carro.direita
		carro.siga
		...
	senão se carro.direita
		carro.siga
		carro.esqueda
		carro.siga
		...
	senão
		carro.siga
	carro.pare

Senão se - elif

simples, 3 opções= 

if:
	bloco 1
elif:
	bloco 2
else:
	bloco 3

mais de 3 opções=

if:
	bloco 1
elif:
	bloco 2
elif:
	bloco 3
else:
	bloco 4

---------------------------------------------------

ESTRUTURAS DE REPETIÇÃO

Laços de repetição:

============== FOR ===============

exemplo vida real:
andar 10m e pegar algo

	laço c no intervalo (1, 10)
		passos
	pegar

mesmo exemplo so que em python:

	for c in range(1, 10):
		passos
	pegar

outro exemplo na vida real:
andar 1m (4x), pular 1m (3x) e pegar algo

	laço c no intervalo(0, 3)
		passo
		pular
	passo
	pegar

em python
	
	for c in range(0, 3)
		passo
		pular
	passo
	pegar

combinando com condições aninhadas

andar 1m (4x), pular 1m (3x), pegar algo... mas se durante o caminho tiver dinheiro (por exemplo) pegar esse dinheiro

vr:
	laço c no intervalo(0,3)
		se dinheiro
			pegar
		passo
		pular
	passo
	pegar

py:

	for c in range(0, 3)
		if dinheiro
			pegar
		passo
		pular
	passo
	pegar

====

============== WHILE ===============

mesmo exemplo usado anteriormente
exemplo vida real:
andar até chegar no objeto e pegar ele

	enquanto não objeto
		passo
	pegar

mesmo exemplo so que em python:

	while not objeto:
		passo
	pegar

outro:
andar até chegar no objeto e pegar ele... mas se durante o caminho tiver dinheiro (por exemplo) pegar esse dinheiro

vr:
	enquanto não objeto
		se Verdadeiro chão
			passo
		se Falso chão
			pular
		se Verdadeiro dinheiro
			pegar
	pegar

py:

	while not objeto:
		if True chão:
			passo
		if False chão:
			pular
		se True dinheiro:
			pegar
	pegar
